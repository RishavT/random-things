set hlsearch
set wrap!
let g:gruvbox_italic=1
set termguicolors
syntax on
set number
set splitright
set splitbelow

" Press Space to turn off highlighting and clear any message already
" displayed.
" TODO fix this
" :nnoremap <silent> <C-A-Space> :nohlsearch<Bar>:echo<CR>

" Load bashrc / zshrc
" let &shell='zsh -c "ARGV0=sh DISPLAY=:0 ENV=~/bin/zshrc_custom exec zsh"'
" autocmd vimenter * let &shell='zsh -i -c "ARGV0=sh DISPLAY=:0 ENV=~/bin/zshrc_custom exec zsh -i"'
autocmd vimenter * let &shell='/bin/zsh -i'


" Python executable
let g:python3_host_prog = $HOME."/.pyenv/versions/3.9.7/bin/python3.9"

" remap meta to escape key
imap <Super> <Esc>

set nocompatible              " required
filetype off                  " required

" Search visually selected text wtih //.
" Overwrites clipboard.
vnoremap // y/<C-R>"<CR>

" set the runtime path to include Vundle and initialize

" Either comment (and write in init file) or modify the following line
" for neovim
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)

" NerdTree
" Plugin 'scrooloose/nerdtree'

" Colour Schemes
" Plugin 'flazz/vim-colorschemes'

" Set Colors plugin
" Plugin 'felixhummel/setcolors.vim'

" Install SimplyFold
" Plugin 'tmhedberg/SimpylFold'

" Python indent
Plugin 'vim-scripts/indentpython.vim'

" Auto complete
" Install dependencies after installing using vundle
" https://github.com/Valloric/YouCompleteMe
" Plugin 'Valloric/YouCompleteMe'

" File finder
" Plugin 'ctrlpvim/ctrlp.vim'
" Install fzf - apt install fzf / brew install fzf
" Map fzf oto Ctrl P
Plugin 'junegunn/fzf'
nmap <C-P> :FZF<CR>
command -nargs=1 Fopen :call fzf#run({'source': 'find <args>', 'sink': 'e'})
nmap <C-G> :Fopen .github<CR>

" GitGutter - Show diffs in gutter
Plugin 'airblade/vim-gitgutter'

" BufExplorer - Buffer management
Plugin 'jlanzarotta/bufexplorer'

" Bracket management
" Plugin 'tpope/vim-surround'

" Show indent guide
" Plugin 'nathanaelkane/vim-indent-guides'

" Vim misc (required for automatic tag generation)
" Plugin 'xolox/vim-misc'

" Automatic tag generation
" Plugin 'xolox/vim-easytags'

" Display current class/function - TagBar
" Plugin 'majutsushi/tagbar'

" Nerd Commenter
" Plugin 'scrooloose/nerdcommenter'

" ...

" Swagger
" Plugin 'xavierchow/vim-swagger-preview'

" JS Beautify
Plugin 'maksimr/vim-jsbeautify'

" Multiple Cursors
" Plugin 'terryma/vim-multiple-cursors'
"

" jedi - jumping
Plugin 'davidhalter/jedi-vim'
" disable autocompletion, because we use deoplete for completion
let g:jedi#completions_enabled = 0
" open the go-to function in split, not another buffer
let g:jedi#use_splits_not_buffers = "right"

" Deoplete
Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plugin 'deoplete-plugins/deoplete-jedi'
let g:deoplete#enable_at_startup = 1

" Status bar
Plugin 'vim-airline/vim-airline'

" Automatic brace comletion
Plugin 'vim-scripts/auto-pairs-gentle'

" Surrounding words with quotes
Plugin 'tpope/vim-surround'

" Linting
Plugin 'neomake/neomake'
let g:neomake_python_enabled_makers = ['flake8']

" Highlight copied things
Plugin 'machakann/vim-highlightedyank'
" set highlight duration in ms
let g:highlightedyank_highlight_duration = 800

" Code folding
Plugin 'tmhedberg/SimpylFold'

" One dark theme
Plugin 'joshdick/onedark.vim'

" One colorscheme (for light)
Plugin 'rakr/vim-one'
"Run set background=light after selecting colorscheme=one if needed

" Autoformat
Plugin 'vim-autoformat/vim-autoformat'

" Markdown auto render
Plugin 'instant-markdown/vim-instant-markdown'

" Copy path
Plugin 'vim-scripts/copypath.vim'

" Typescript

Plugin 'leafgarland/typescript-vim'

" React

Plugin 'peitalin/vim-jsx-typescript'

" Jupyter

Plugin 'dccsillag/magma-nvim'

" CSV

Plugin 'chrisbra/csv.vim'


" Markdown pandoc
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
filetype plugin on

" Enable indent guides
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_guide_size = 1

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
" set foldmethod=indent
" set foldlevel=99
" 
" " Enable folding with the spacebar
" nnoremap <space> za


" Docstrings for folded code
" let g:SimpylFold_docstring_preview=1

" Indentation
au BufNewFile,BufRead *.py,*.md,*.dart
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

au BufNewFile,BufRead *.js,*.html,*.ts,*.tsx,*.vue
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" Highlight trailing whitespaces
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match Error /\s\+$/

" Unfold by default
au BufRead * normal zR
" Remove trailing whitespace
command Delwhite :%s/\s\+$//e

" Toggle tag bar
nmap <F8> :TagbarToggle<CR>


function! NextHunkAllBuffers()
  let line = line('.')
  GitGutterNextHunk
  if line('.') != line
    return
  endif

  let bufnr = bufnr('')
  while 1
    bnext
    if bufnr('') == bufnr
      return
    endif
    if !empty(GitGutterGetHunks())
      normal! 1G
      GitGutterNextHunk
      return
    endif
  endwhile
endfunction

function! PrevHunkAllBuffers()
  let line = line('.')
  GitGutterPrevHunk
  if line('.') != line
    return
  endif

  let bufnr = bufnr('')
  while 1
    bprevious
    if bufnr('') == bufnr
      return
    endif
    if !empty(GitGutterGetHunks())
      normal! G
      GitGutterPrevHunk
      return
    endif
  endwhile
endfunction

nmap <silent> }c :call NextHunkAllBuffers()<CR>
nmap <silent> {c :call PrevHunkAllBuffers()<CR>


" Custom command for pdb
let @o = '^i€kuimport pdb; pdb.set_trace()'
let @p = '^i€kubreakpoint()'

" UTF-8 support
set encoding=utf-8

" Default color scheme
" colorscheme tropikos
" colorscheme gruvbox
colorscheme onedark

" Use system clipboard for yanking

:nnoremap <expr> y (v:register ==# '"' ? '"x' : '') . 'y'
:nnoremap <expr> yy (v:register ==# '"' ? '"x' : '') . 'yy'
:nnoremap <expr> Y (v:register ==# '"' ? '"x' : '') . 'Y'
:xnoremap <expr> y (v:register ==# '"' ? '"x' : '') . 'y'
:xnoremap <expr> Y (v:register ==# '"' ? '"x' : '') . 'Y'

:nnoremap <expr> p (v:register ==# '"' ? '"x' : '') . 'p'
:nnoremap <expr> pp (v:register ==# '"' ? '"x' : '') . 'pp'
:nnoremap <expr> P (v:register ==# '"' ? '"x' : '') . 'P'
:xnoremap <expr> p (v:register ==# '"' ? '"x' : '') . 'p'
:xnoremap <expr> P (v:register ==# '"' ? '"x' : '') . 'P'

:nnoremap <expr> x (v:register ==# '"' ? '"x' : '') . 'd'
:nnoremap <expr> xx (v:register ==# '"' ? '"x' : '') . 'xx'
:nnoremap <expr> X (v:register ==# '"' ? '"x' : '') . 'X'
:xnoremap <expr> x (v:register ==# '"' ? '"x' : '') . 'x'
:xnoremap <expr> X (v:register ==# '"' ? '"x' : '') . 'X'


" Searching within visual selection - Alt + /
:vnoremap <M-/> <Esc>/\%V

" Insert single character using Ctrl I
:nnoremap <C-i> i_<Esc>r

" Auto linting
call neomake#configure#automake('nrwi', 500)

" Instant markdown
filetype plugin on
let g:instant_markdown_python = 1

" json pretty print
command AutoJSON %!python -m json.tool

" Black
command Black !black %

" Magma jupyter
nnoremap <silent><expr> <LocalLeader>r  :MagmaEvaluateOperator<CR>
nnoremap <silent>       <LocalLeader>rr :MagmaEvaluateLine<CR>
xnoremap <silent>       <LocalLeader>r  :<C-u>MagmaEvaluateVisual<CR>
nnoremap <silent>       <LocalLeader>rc :MagmaReevaluateCell<CR>
nnoremap <silent>       <LocalLeader>rd :MagmaDelete<CR>
nnoremap <silent>       <LocalLeader>ro :MagmaShowOutput<CR>

let g:magma_automatically_open_output = v:false
